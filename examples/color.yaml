
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    appmesh.k8s.aws/sidecarInjectorWebhook: enabled
  name: appmesh-demo

---
apiVersion: appmesh.k8s.aws/v1beta1
kind: Mesh
metadata:
  name: color-mesh

---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: colorgateway
  namespace: appmesh-demo
spec:
  meshName: color-mesh
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  serviceDiscovery:
    dns:
      hostName: colorgateway.appmesh-demo.svc.cluster.local
  backends:
    - virtualService:
        virtualServiceName: colorteller-white.appmesh-demo
  logging:
    accessLog:
      file:
        path: /dev/stdout

---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: colorteller-white
  namespace: appmesh-demo
spec:
  meshName: color-mesh
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  serviceDiscovery:
    dns:
      hostName: colorteller-white.appmesh-demo.svc.cluster.local

---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualService
metadata:
  name: colorteller-white.appmesh-demo
  namespace: appmesh-demo
spec:
  meshName: color-mesh
  virtualRouter:
    listeners:
      - portMapping:
          port: 9080
          protocol: http
  routes:
    - name: color-route
      http:
        match:
          prefix: /
        action:
          weightedTargets:
            - virtualNodeName: colorteller-white
              weight: 1

---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualService
metadata:
  name: colorgateway.appmesh-demo
  namespace: appmesh-demo
spec:
  meshName: color-mesh
  virtualRouter:
    listeners:
      - portMapping:
          port: 9080
          protocol: http
  routes:
    - name: gateway-route
      http:
        match:
          prefix: /color
        action:
          weightedTargets:
            - virtualNodeName: colorgateway
              weight: 1

---
apiVersion: v1
kind: Service
metadata:
  name: colorgateway
  namespace: appmesh-demo
  labels:
    app: colorgateway
spec:
  ports:
    - port: 9080
      name: http
  selector:
    app: colorgateway

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: colorgateway
  namespace: appmesh-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colorgateway
      version: v1
  template:
    metadata:
      labels:
        app: colorgateway
        version: v1
    spec:
      containers:
        - name: colorgateway
          image: 970805265562.dkr.ecr.us-west-2.amazonaws.com/gateway:latest
          ports:
            - containerPort: 9080
          env:
            - name: "SERVER_PORT"
              value: "9080"
            - name: "COLOR_TELLER_ENDPOINT"
              value: "colorteller-white.appmesh-demo:9080"

---
apiVersion: v1
kind: Service
metadata:
  name: colorteller-white
  namespace: appmesh-demo
  labels:
    app: colorteller-white
spec:
  ports:
    - port: 9080
      name: http
  selector:
    app: colorteller-white
    version: white

---

# white
apiVersion: apps/v1
kind: Deployment
metadata:
  name: colorteller-white
  namespace: appmesh-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colorteller-white
      version: white
  template:
    metadata:
      labels:
        app: colorteller-white
        version: white
    spec:
      containers:
        - name: colorteller
          image: 970805265562.dkr.ecr.us-west-2.amazonaws.com/colorteller:latest
          ports:
            - containerPort: 9080
          env:
            - name: "SERVER_PORT"
              value: "9080"
            - name: "COLOR"
              value: "white"

---
# kubectl exec $(kubectl get po -l run=curler -o jsonpath='{.items[0].metadata.name}') -- curl -vvv colorgateway:9080/color
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: curler
  name: curler
  namespace: appmesh-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      run: curler
  template:
    metadata:
      labels:
        run: curler
    spec:
      containers:
      - args:
        - /bin/bash
        - -c
        - 'sleep infinity'
        image: tutum/curl
        imagePullPolicy: Always
        name: curler
